% This is a speedy version of USmultiflite_Chloe. % Version2 has taken account of a glitch of when the waveforms do not have a baseline pressure value of zero.% Version3 reports the Signal to Noise ratio% Inputs:%     CSV files: With headings labeled "Time" and "Average_B_"%         1 water file%         # phantom files (# determined by phantomperwatersample)%     Variables: %         GG = the folder where your files are in%         phantomperwatersample = however many phantoms are being compared to your water data. Repeats the code that many times.%         zoomstart / zoomend = when plotting, where the left side will be cropped to. 0=no cropping. %   % Outputs:%     Speed of sound in phantom in m/s%     Attenuation in phantom in dB/cm%     At center frequency in MHz%     Signal to noise ratio of the phantom waveformclcclear allclose allrootfolder=pwd;GG= 'C:\Users\beast\Box\Research_FUS\LabEquipment\ThroughTransmission\Data\TT_Data_2-9-2023';phantomperwatersample=3;zoomstart=0.85e4;zoomend=1.2e4;cd(GG)repeat    = 1; firstflag = 1;ii        = 1; savedt    = 0;kk        = 0;nxt       = 1;secflag   = 0;counter   = 0;watertemp = 50;%%button1='Yes';if strcmp(button1,'Yes');            while nxt;         kk = kk+1;        Fr(kk)=1;             %accepting the csv files that we're outputting            [filename2, pathname2] = uigetfile('*.csv','Open .txt file for SHORTER LENGTH L2 or WATER-ONLY');            data2=readtable(filename2);            sm2(:,1) = data2.Time;            sm2(:,2) = data2.Average_B_;                    s2 = sm2(:,2)';  %%Windowing%%             N = length(s2);        wmean    = mean(s2(1:N)); % calculate, in case window is not asked for.        Windflag = 'No.';         Windone  = 0;        if secflag == 0;            while Windone == 0             figure;            plot(s2);            xlabel('index');            ylabel('pressure');            title('Signal through SHORTER length L2 or WATER-ONLY path');            set(gcf,'units','normalized','outerposition',[0 0 1 1])            xlim([zoomstart zoomend])            [x,y] = ginput(2);            wliml = round(x(1));             wlimu = round(x(2));            close                if (wliml<1 || wlimu<1 || wlimu>N || wliml>wlimu)                     dummy  = inputdlg('','ERROR!',1,{'Limits must be between 1 and N, and lower < upper.'});                 else wmean = mean(s2(1:wliml));                     s2(1:wliml) = wmean;                     s2(wlimu:N) = wmean;                    Windone     = 1;                     Windflag    = 'Yes.';                end            end         end        WatOnly{kk,1} = wmean;   %Baseline traces are stored in cell in order they are entered for future reference         WatOnly{kk,2} = s2;                 nxt=0; %end, chloe    end    save('WatOnly.mat','WatOnly','Fr','pathname2');     %Saves .mat file with all user-defined frequencies for future useend %%Sample Measurement Input%%%The code starts here if the user chooses not to create new Baseline traces.             while repeat		% Start of overall 'while' for repeating data set analysis.close allvalid = 0;while valid == 0             %accepting the csv files that we're outputting            [filename, pathname] = uigetfile('*.csv','Open .txt file for LONGER LENGTH L1');            data1=readtable(filename);            sm1(:,1) = data1.Time;            sm1(:,2) = data1.Average_B_;            valid = 1;            counter=counter+1;	endload(['WatOnly.mat']); s1 = sm1(:,2)';	% make row vector.N  = length(s1);if length(s2) ~= N	error ('The lengths of the two files must be the same');  end%% ------------------------ Windowing ---------------------------------button0='Window';smean    = mean(s1(1:N));   % calculate, in case window is not asked for.Windflag = 'No.'; Windone  = 0;if strcmp(button0,'Window')	while Windone == 0            plot(s1);    xlabel('index');    ylabel('pressure');    title('Signal through LONGER length L1');    set(gcf,'units','normalized','outerposition',[0 0 1 1])    xlim([zoomstart zoomend])        [x,y] = ginput(2);    sliml = round(x(1));     slimu = round(x(2));        close    % signal to noise calculations   stdev_signal=std(s1(sliml:slimu));   stdev_noise=std(s1(sliml-600:sliml-100));   SNR=stdev_signal/stdev_noise;      if (sliml<1 || sliml>N || slimu<1 || slimu>N || sliml>slimu)         dummy  = inputdlg('','ERROR!',1,{'Limits must be between 1 and N, and lower < upper.'});     else        smean       = mean(s1(1:sliml));         s1(1:sliml) = smean;         s1(slimu:N) = smean;        Windone     = 1;         Windflag    = 'Yes.';    end    end%% ---------------- Enter the input ---------------------------estdt = (sm1(10,1) - sm1(1,1))/9;	% try increment in time-domain file, if accurate enough.% if (firstflag || estdt~=savedt)	valid = 0;    	while valid==0	% 		savedt  = estdt;		prompt  = {	'Enter LONGER sample thickness L1 (in mm):',...            'Enter temperature of water bath (in C)'...            'Enter time increment of files (in s):',...			'Enter SHORTER thickness L2 (in mm), or 0 if WATER:',...			'Enter sample density (in gm/cm^3): [not needed if L2~=0. R is not calc]',...            'Enter acoustic velocity (in m/s): [not used if =0; calc c used instead]' };		titl    = 'Input for Calculations';         lines   = 1; %         def     = {num2str(estdt),'0','9','1.025','0'};         def     = {'80',num2str(watertemp),'0.0000000125','0','1.025','0'}; %chloe changed these defaults		answer1 = inputdlg(prompt,titl,lines,def);        		if ~isempty(answer1); valid=1;			deltat = str2double(answer1(3));			L2cm   = str2double(answer1(4))/10;		    L1cm   = str2double(answer1(1))/10;			dens   = str2double(answer1(5))*1e3;  % density in kg/m^3.            venter = str2double(answer1(6));      % velocity to take place of calculated velocity in impedance calc.			temp=str2double(answer1(2));        %temperature of of water            watertemp=str2double(answer1(2));   %making the default from last time            if L2cm>L1cm;                 dummy = inputdlg({' '},'L2 > L1?',1,{'L2 is greater than L1. Is this OK?'}); 				                if isempty(dummy);                     valid = 0;                 end;                            end                    end            end    % endt  = 0:deltat:deltat*(N-1); % for plots only.vw=1402.38744 + 5.03835027 * temp - 0.0581142290 * temp^2 + 0.000334558776 * temp^3 - 0.00000148150040 * temp^4 + 0.00000000316081885 * temp^5; %Calculated velocity of ultrasound in water in m/s based on Nykolai paper dataT      = deltat*N;	        % time length of record.deltaf = 1/T;f      = 0:deltaf:deltaf*floor(N/2); % need only half of freq range for Hermitian spectrum.fMHz   = f/1e6;	            % frequency in MHz.%% --------- Fourier transforms ---------------FF1   = fft(s1);	                        % frequency spectrum of length L1.F1    = 2*abs(FF1(1:floor(N/2)+1))/N;	    % see Bioen 1101 class notes to see why these factors.F1(1) = abs(FF1(1))/N;phi1  = unwrap(angle(FF1(1:floor(N/2)+1)));	% in radians. FF2   = fft(s2);	                        % frequency spectrum of length L2.F2    = 2*abs(FF2(1:floor(N/2)+1))/N;	    % see Bioen 1101 class notes to see why these factors.F2(1) = abs(FF2(1))/N;phi2  = unwrap(angle(FF2(1:floor(N/2)+1)));	% in radians. % The next lines find the frequency at the center of mass of shorter-length spectrum F2:threshind = find(F2 < max(F2)/20);    % first threshold F2 so noise less than peak/20 does not contribute to mass.F2th      = F2; F2th(threshind)=0;spectint  = sum(F2th);                % total mass of spectrum.spectcum  = cumsum(F2th);             % cumulative sum of spectrum.centind   = find((spectcum > spectint/2),1,'first'); % first index where cumulative area is 1/2 of total area.centfreq  = centind*deltaf/1e6;       % frequency in MHz.dcm       = L1cm - L2cm;	          % length difference.dm        = dcm/100;	              % d in m.%% Calculation of time-of-flight velocity using envelope of analytic signalP1                 = 2*FF1; P1(floor(N/2)+2:N) = 0;	% fabricate Fourier transform of analytic signal for length L1.psi1               = ifft(P1);psi1env            = sqrt(psi1.*conj(psi1));P2                 = 2*FF2; P2(floor(N/2)+2:N) = 0;	% fabricate Fourier transform of analytic signal for length L2.psi2               = ifft(P2);psi2env            = sqrt(psi2.*conj(psi2));psi1env = psi1env - psi1env(1);             % removing an offset to account for occational glitchpsi2env = psi2env - psi2env(1);cc              = xcorr(psi1env,psi2env);    % find cross-correlation of two envelopes.[val,peakindcc] = max(cc);		             % find the location of the max of the cross-correlation.peakindshift    = peakindcc-length(psi1env); % subtract the ceter of the cross-correlation index.difft = peakindshift*deltat;	% difference in arrival times.L1    = L1cm/100;	            % convert to m.L2    = L2cm/100;dl    = L1 - L2;vtf   = dl/((dl/vw) + difft);	% substitution method; see Le, 1998.%% --------------- Estimate of reflection loss at faces -------------------densw = 1000;	    % density of water in kg/m^3Zw    = densw*vw;	% impedance of waterif venter == 0;    vimp  = vtf;else vimp = venter;endZs = dens*vimp;	           % impedance of sample.R  = (Zs - Zw)/(Zs + Zw);  % pressure reflection coeff.T  = 1 - R*R;              % power transmission coeff.TT = -1*10*log10(T);	   % estimate of atten due to both face reflections.if L2 == 0;     	    % water-only path.	attface = TT;   	% account for estimated face reflection attenuation.	Wflag   = 'Yes.';else	attface = 0;	Wflag   = 'No.';end%% ---------- Calculation of attenuation in time domain -----------------% S1 is the received signal with sample as a function of time % S2 is the received signal water only as a function of time% N is number of data points% dcm       = L1cm - L2cm;	          % length difference.% dm        = dcm/100;	              % d in m.% subtract means to avoid bias in power calc.s2sq    = (s2 - wmean).*(s2 - wmean); s1sq    = (s1 - smean).*(s1 - smean);   % calc of atten in time domain in dB per cm.attcmtd = (10*log10(sum(s2sq)/sum(s1sq)) - attface)/dcm;    if L2 == 0;		% totatt only makes sense if we have water-only data.	totatt = 10*log10(sum(s2sq)/sum(s1sq));else	totatt = NaN;end%% -------------  Pressure Plots  ---------------	prompt = {'Calculated time-of-flight velocity (in m/s):',...	'Attenuation from time domain (in dB/cm):','at center frequency (in MHz):','Signal to noise ratio:',''};	titl   = 'Results';     lines  = 1;	val    = {num2str(vtf,7),num2str(attcmtd,3),num2str(centfreq,'%4.3f'),num2str(SNR,4),...		'Hit OK to save (or Cancel to not save).'};        options.Resize ='on'; options.WindowStyle='normal';    	dummy  = inputdlg(prompt,titl,lines,val,options);if ~isempty(dummy)		disp('-------------------------------------------------------------------     ');	disp('INPUT');	disp(['  Filename Shorter length:',filename2,'  /  Filename Longer length:',filename]);	disp(['  Shorter length L2 = ',num2str(L2cm*10),' mm.',...		'                                  Longer length L1 = ',num2str(L1cm*10),' mm.']);	disp(['  Assumed density of sample = ',num2str(dens/1000),' g/cm^3.']);	disp(['  Time windowing done?  ',Windflag]);	disp('------------------------');	disp('VELOCITY');	disp(['  Time-of-flight velocity = ',num2str(vtf,4),' m/s.']);	disp('------------------------');	disp('ATTENUATION');	disp(['  Attenuation from time domain analysis = ',num2str(attcmtd,3),' dB/cm']);	disp(['          around center frequency of ',num2str(centfreq,'%4.3f'),' MHz.']);	disp(['      Face reflection losses subtracted? (if shorter length is water only)  ',Wflag]);	disp(['      Calc. imped. of sample= ',num2str(Zs/1e6,3),' MRayl / Est. reflect. loss, both faces = ',...			num2str(TT,3),' dB.']);	disp(['  Total attenuation (incl. reflections) of longer-length sample in water = ',...			num2str(totatt,3),' dB.']);	disp('-------------------------------------------------------------------     ');	Atten(ii)      = attcmtd;	Centerfreq(ii) = centfreq;	Phasevel(ii)   = vtf;	truncfilename  = filename(1:length(filename) - 4);	% strip suffix from name.	truncfilename2 = filename2(1:length(filename2) - 4);	% strip suffix from name.	%Pairnames(ii)  = {[truncfilename2,'/',truncfilename]};    Pairnames(ii)  = {[truncfilename]};	ii = ii + 1;	endif counter == phantomperwatersample;    repeat = 0;endfirstflag = 0;endend % end of overall 'while' for repeating data set analysiscd(rootfolder)close all